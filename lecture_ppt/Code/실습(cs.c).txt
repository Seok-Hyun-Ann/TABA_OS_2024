#include <stdio.h>
#include <pthread.h>

// 공유 자원인 counter 변수
static volatile int counter = 0;  // counter 변수는 여러 스레드가 접근하므로 volatile로 선언
pthread_mutex_t lock;  // 뮤텍스 선언

/**
 * mythread()
 *
 * 스레드 함수로, counter 변수에 1을 10,000,000번 더하는 작업을 수행
 */
void *mythread(void *arg) {
    printf("%s: begin\n", (char *) arg);  // 스레드 시작 시 메시지 출력
    int i;
    for (i = 0; i < 1e7; i++) {  // 10,000,000번 반복
        pthread_mutex_lock(&lock);  // 뮤텍스 잠금 (임계 구역 시작)
        counter = counter + 1;  // 공유 변수 counter에 1을 더함
        pthread_mutex_unlock(&lock);  // 뮤텍스 잠금 해제 (임계 구역 끝)
    }
    printf("%s: done\n", (char *) arg);  // 스레드 완료 시 메시지 출력
    return NULL;
}

int main(int argc, char *argv[]) {
    pthread_t p1, p2;  // 두 개의 스레드를 위한 변수
    pthread_mutex_init(&lock, NULL);  // 뮤텍스 초기화

    printf("main: begin (counter = %d)\n", counter);  // 프로그램 시작 시 counter 값 출력

    // 스레드 생성
    pthread_create(&p1, NULL, mythread, "A");  // 첫 번째 스레드 생성
    pthread_create(&p2, NULL, mythread, "B");  // 두 번째 스레드 생성

    // 스레드가 종료될 때까지 대기
    pthread_join(p1, NULL);  // 첫 번째 스레드가 끝날 때까지 기다림
    pthread_join(p2, NULL);  // 두 번째 스레드가 끝날 때까지 기다림

    printf("main: done with both (counter = %d)\n", counter);  // 두 스레드가 종료된 후 counter 값 출력

    pthread_mutex_destroy(&lock);  // 뮤텍스 제거
    return 0;
}


/* mutex_lock */
뮤텍스는 동기화 메커니즘으로, 동시에 여러 스레드가 특정 코드 블록에 접근하지 못하도록 잠금(Lock)을 제공합니다.
이 코드에서, counter에 1을 더하는 작업을 수행할 때 동시에 여러 스레드가 counter를 수정하지 않도록 뮤텍스를 사용합니다.


/* 실행 순서 */
메인 스레드가 프로그램을 시작하고 counter를 0으로 초기화한 후, 뮤텍스를 초기화합니다.
두 개의 스레드(A, B)가 생성되고, 각각 mythread() 함수를 실행합니다.
각 스레드는 10,000,000번 반복하며 뮤텍스를 통해 counter에 접근하여 1을 더합니다.
뮤텍스를 사용하여 한 스레드가 counter를 수정할 동안 다른 스레드는 대기하게 되어, 경쟁 상태가 발생하지 않도록 보호됩니다.
두 스레드가 완료되면, 메인 스레드는 두 스레드가 종료되기를 기다리고, 최종적으로 counter 값을 출력합니다.
프로그램이 종료되기 전에 뮤텍스를 제거하고, 프로그램이 정상적으로 종료됩니다.
