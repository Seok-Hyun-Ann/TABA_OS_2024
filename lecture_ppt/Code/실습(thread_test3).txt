#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ARRAY_SIZE 100000000  // 배열의 크기: 1억
#define NUM_THREADS 4  // 사용할 스레드의 개수: 4

int *array;  // 동적으로 할당할 배열
long long partial_sums[NUM_THREADS];  // 각 스레드의 부분 합을 저장할 배열

// 각 스레드가 실행할 함수
void* sum_array(void* arg) {
    int thread_id = *((int*) arg);  // 스레드의 ID를 가져옴
    int chunk_size = ARRAY_SIZE / NUM_THREADS;  // 각 스레드가 처리할 배열의 크기
    int start = thread_id * chunk_size;  // 스레드가 처리할 배열의 시작 인덱스
    int end = (thread_id == NUM_THREADS - 1) ? ARRAY_SIZE : start + chunk_size;  // 마지막 스레드는 끝까지 처리

    long long sum = 0; //배열 크기가 1억이기 때문에 큰 숫자를 처리하기 위해 long long으로 선언
    for (int i = start; i < end; i++) {
        sum += array[i];
    }
    partial_sums[thread_id] = sum;  // 부분 합을 저장
    return NULL;
}

int main() {
    pthread_t threads[NUM_THREADS];  // 스레드를 저장할 배열
    int thread_ids[NUM_THREADS];  // 스레드 ID를 저장할 배열
    long long total_sum = 0;  // 배열의 전체 합을 저장할 변수

    array = malloc(ARRAY_SIZE * sizeof(int));  // 배열을 동적으로 할당

    // 배열 초기화 (모든 요소를 1로 설정)
    for (int i = 0; i < ARRAY_SIZE; i++) {
        array[i] = 1;
    }

    clock_t start, end;  // 시간 측정을 위한 변수
    double cpu_time_used;  // 계산에 걸린 시간을 저장할 변수

    // 시간 측정 시작
    start = clock();

    // NUM_THREADS개의 스레드 생성
    for (int i = 0; i < NUM_THREADS; i++) {
        thread_ids[i] = i;  // 각 스레드의 ID를 설정
        if (pthread_create(&threads[i], NULL, sum_array, &thread_ids[i]) != 0) {  // 스레드 생성
            perror("Failed to create thread");  // 스레드 생성 실패 시 에러 메시지 출력
            exit(1);  // 에러 발생 시 프로그램 종료
        }
    }

    // 각 스레드가 끝날 때까지 대기
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);  // 각 스레드가 완료될 때까지 기다림
    }

    // 각 스레드가 계산한 부분 합을 모아서 전체 합을 계산
    for (int i = 0; i < NUM_THREADS; i++) {
        total_sum += partial_sums[i];  // 각 스레드의 부분 합을 더함
    }

    // 시간 측정 종료
    end = clock();
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;  // 시간 계산

    // 결과 출력
    printf("Multi-threaded sum: %lld\n", total_sum);  // 전체 배열의 합 출력
    printf("Multi-threaded execution time: %f seconds\n", cpu_time_used);  // 계산에 걸린 시간 출력

    free(array);  // 동적으로 할당된 배열 메모리 해제
    return 0;
}


/* 실행 순서 */
배열이 동적으로 할당되고 모든 요소가 1로 초기화됩니다.
4개의 스레드가 생성되어 배열의 각 부분을 나누어 계산합니다.
각 스레드는 자신이 담당하는 배열 부분을 계산한 후 부분 합을 저장합니다.
메인 스레드는 각 스레드가 종료될 때까지 기다린 후, 각 스레드의 부분 합을 모아 전체 합을 계산합니다.
전체 배열의 합과 계산 시간을 출력한 후, 동적으로 할당된 메모리를 해제하고 프로그램이 종료됩니다.
