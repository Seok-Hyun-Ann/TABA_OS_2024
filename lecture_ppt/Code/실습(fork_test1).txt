#include <sys/types.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

int main(void) {
    pid_t fork_return; // fork() 함수가 반환하는 값을 저장할 변수 선언

    // 현재 프로세스의 PID를 출력 (getpid()는 현재 프로세스의 PID를 반환)
    printf("hello my pid is %d\n", getpid());

    // fork()를 호출하여 프로세스를 복제 (새로운 프로세스 생성)
    // fork()는 자식 프로세스에서 0을 반환하고, 부모 프로세스에서는 자식 프로세스의 PID를 반환
    // fork()가 실패할 경우 음수를 반환하므로, 에러 처리를 진행
    if((fork_return = fork()) < 0) {
        // fork() 실패 시, 에러 메시지 출력
        perror("fork error");
        exit(1); // 프로그램을 에러 코드 1로 종료
    }
    // fork()가 성공한 경우
    else if (fork_return == 0) {
        // 이 블록은 자식 프로세스에서 실행됨
        // 자식 프로세스의 PID와 부모 프로세스의 PID 출력
        printf("child: pid=%d, ppid=%d\n", getpid(), getppid());
    } else {
        // 이 블록은 부모 프로세스에서 실행됨
        // 부모 프로세스는 자식 프로세스가 종료될 때까지 대기 (wait()는 자식 프로세스가 끝날 때까지 기다림)
        wait();

        // 부모 프로세스에서 자식 프로세스가 생성되었음을 출력
        printf("parent: i created child with pid=%d\n", fork_return);
    }

    // 자식과 부모 프로세스 모두 이 부분을 실행
    // 현재 프로세스의 PID를 출력하며 프로그램 종료
    printf("bye, my pid is %d\n", getpid());

    return 0; // 프로그램 정상 종료
}
